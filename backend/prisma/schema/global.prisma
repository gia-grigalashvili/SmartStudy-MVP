model Language {
  id String @id @default(uuid()) @db.Uuid

  code  String @unique
  name  String
  order Int    @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminTranslations   AdminTranslation[]
  teacherTranslations TeacherTranslation[]
  studentTranslations StudentTranslation[]
  subjectTranslations SubjectTranslation[]

  @@map("languages")
}

model File {
  id String @id @default(uuid()) @db.Uuid

  name  String
  path  String
  size  Int
  order Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("files")
}

model RefreshToken {
  id String @id @default(uuid()) @db.Uuid

  admin   Admin?  @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId String? @db.Uuid

  teacher   Teacher? @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String?  @db.Uuid

  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String?  @db.Uuid

  token     String   @unique
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refresh_tokens")
}

model Flashcard {
  id        String  @id @default(uuid()) @db.Uuid
  front     String
  back      String
  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("flashcards")
}

model Task {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  description String
  dueDate     DateTime
  completed   Boolean  @default(false)

  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tasks")
}

model Quiz {
  id      String   @id @default(uuid()) @db.Uuid
  title   String
  date    DateTime
  group   Group    @relation(fields: [groupId], references: [id])
  groupId String   @db.Uuid

  subject   Subject? @relation(fields: [subjectId], references: [id])
  subjectId String?  @db.Uuid

  results QuizResult[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quizzes")
}

model QuizResult {
  id     String @id @default(uuid()) @db.Uuid
  score  Int
  quiz   Quiz   @relation(fields: [quizId], references: [id])
  quizId String @db.Uuid

  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quiz_results")
}
