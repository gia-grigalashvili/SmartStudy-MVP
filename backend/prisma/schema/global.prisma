model Language {
  id String @id @default(uuid(7)) @db.Uuid

  code  String @unique
  name  String
  order Int    @default(autoincrement())

  headerTranslations           HeaderTranslation[]
  introduceTranslations        IntroduceTranslation[]
  newsTranslations             NewsTranslation[]
  serviceTranslations          ServiceTranslation[]
  FAQTranslations              FAQTranslation[]
  blogTranslations             BlogTranslation[]
  categoryTranslations         CategoryTranslation[]
  contactTranslations          ContactTranslation[]
  examinationSheetTranslations ExaminationSheetTranslation[]
  icdTranslations              ICDTranslation[]
  recipeUnitTranslations       RecipeUnitTranslation[]
  pageComponentTranslations    PageComponentTranslation[]
  aboutTranslations            AboutTranslation[]
  educationTranslations        EducationTranslation[]
  experienceTranslations       ExperienceTranslation[]
  videoTranslations            VideoTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("languages")
}

model File {
  id String @id @default(uuid()) @db.Uuid

  name  String
  path  String
  size  Int
  order Int?

  header       Header?     @relation(fields: [headerId], references: [id], onDelete: Cascade)
  headerId     String?     @unique @db.Uuid
  news         News?       @relation(fields: [newsId], references: [id], onDelete: Cascade)
  newsId       String?     @unique @db.Uuid
  blog         Blog?       @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId       String?     @unique @db.Uuid
  contact      Contact?    @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId    String?     @unique @db.Uuid
  visit        Visit?      @relation(fields: [visitId], references: [id])
  visitId      String?     @unique @db.Uuid
  theme        Theme?      @relation(fields: [themeId], references: [id])
  themeId      String?     @unique @db.Uuid
  social       Social?     @relation(fields: [socialId], references: [id])
  socialId     String?     @unique @db.Uuid
  about        About?      @relation(fields: [aboutId], references: [id])
  aboutId      String?     @unique @db.Uuid
  education    Education?  @relation(fields: [educationId], references: [id])
  educationId  String?     @unique @db.Uuid
  experience   Experience? @relation(fields: [experienceId], references: [id])
  experienceId String?     @unique @db.Uuid
  video        Video?      @relation(fields: [videoId], references: [id])
  videoId      String?     @unique @db.Uuid
  user         User?       @relation(fields: [userId], references: [id])
  userId       String?     @unique @db.Uuid
  message      Message?    @relation(fields: [messageId], references: [id])
  messageId    String?     @unique @db.Uuid
  admin        Admin?      @relation(fields: [adminId], references: [id])
  adminId      String?     @unique @db.Uuid

  serviceIcon       Service[] @relation("ServiceIcon")
  serviceBackground Service[] @relation("ServiceBackground")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("files")
}

model RefreshToken {
  id String @id @default(uuid(7)) @db.Uuid

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid

  token     String   @unique
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refresh_tokens")
}

model Tariff {
  id        String    @id @default(uuid()) @db.Uuid
  price     Float     @default(0)
  fromDate  DateTime  @default(now())
  endDate   DateTime?
  isCurrent Boolean   @default(false)

  parentId String?  @db.Uuid
  parent   Tariff?  @relation("TariffVersions", fields: [parentId], references: [id])
  versions Tariff[] @relation("TariffVersions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([parentId])
  @@index([isCurrent])
  @@map("tariffs")
}

model Theme {
  id      String  @id @default(uuid()) @db.Uuid
  name    String
  active  Boolean @default(true)
  colors  Color[]
  preview File?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("themes")
}

model Color {
  id    String @id @default(uuid()) @db.Uuid
  name  String
  value String

  theme   Theme  @relation(fields: [themeId], references: [id], onDelete: Cascade)
  themeId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([themeId, name])
  @@map("colors")
}
